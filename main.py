import os
import json
import ccxt
import pandas as pd
import mplfinance as mpf
from io import BytesIO
from telegram import Bot, Update
from telegram.ext import Updater, CommandHandler
from apscheduler.schedulers.background import BackgroundScheduler

TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
TELEGRAM_CHAT_ID = os.environ.get('TELEGRAM_CHAT_ID')

SYMBOLS_FILE = 'symbols.json'

def load_symbols():
    try:
        with open(SYMBOLS_FILE, 'r') as f:
            return json.load(f)
    except:
        return []

def save_symbols(symbols):
    with open(SYMBOLS_FILE, 'w') as f:
        json.dump(symbols, f)

def job(bot: Bot):
    print("üü° –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ job()...")
    symbols = load_symbols()
    if not symbols:
        print("‚ö†Ô∏è –ù–µ—Ç –º–æ–Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ.")
        return

    exchange = ccxt.bitget()
    for symbol in symbols:
        print(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {symbol}")
        try:
            ohlcv = exchange.fetch_ohlcv(symbol, timeframe='15m', limit=40)
            df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
            df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
            df.set_index('timestamp', inplace=True)

            buf = BytesIO()
            mpf.plot(df, type='candle', style='charles', volume=True, savefig=buf)
            buf.seek(0)

            print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ {symbol}")
            bot.send_photo(chat_id=TELEGRAM_CHAT_ID, photo=buf, caption=f"üìà {symbol} (15m)")
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {symbol}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ {symbol}: {e}")

def add(update: Update, context):
    if len(context.args) != 1:
        update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /add SYMBOL/USDT")
        return
    symbol = context.args[0].upper()
    symbols = load_symbols()
    if symbol not in symbols:
        symbols.append(symbol)
        save_symbols(symbols)
        update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {symbol}")
    else:
        update.message.reply_text("‚õî –£–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ.")

def remove(update: Update, context):
    if len(context.args) != 1:
        update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /remove SYMBOL/USDT")
        return
    symbol = context.args[0].upper()
    symbols = load_symbols()
    if symbol in symbols:
        symbols.remove(symbol)
        save_symbols(symbols)
        update.message.reply_text(f"üóë –£–¥–∞–ª–µ–Ω–æ: {symbol}")
    else:
        update.message.reply_text("‚õî –ù–µ—Ç —Ç–∞–∫–æ–π –ø–∞—Ä—ã.")

def list_symbols(update: Update, context):
    symbols = load_symbols()
    if symbols:
        update.message.reply_text("üìä –ú–æ–Ω–µ—Ç—ã –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏:\n" + "\n".join(symbols))
    else:
        update.message.reply_text("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")

def main():
    updater = Updater(token=TELEGRAM_BOT_TOKEN, use_context=True)
    dispatcher = updater.dispatcher

    dispatcher.add_handler(CommandHandler("add", add))
    dispatcher.add_handler(CommandHandler("remove", remove))
    dispatcher.add_handler(CommandHandler("list", list_symbols))

    updater.start_polling()
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")

    print("üîß –ü—Ä–æ–±–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –≤—Ä—É—á–Ω—É—é...")
    job(updater.bot)

    scheduler = BackgroundScheduler()
    scheduler.add_job(lambda: job(updater.bot), trigger='cron', minute='*/15')
    scheduler.start()
    print("‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç.")

    updater.idle()

if __name__ == "__main__":
    main()